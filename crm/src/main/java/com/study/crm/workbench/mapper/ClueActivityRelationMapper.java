package com.study.crm.workbench.mapper;

import com.study.crm.workbench.domain.ClueActivityRelation;

import java.util.List;

public interface ClueActivityRelationMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_clue_activity_relation
     *
     * @mbggenerated Thu Jan 05 18:26:21 CST 2023
     */
    int deleteByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_clue_activity_relation
     *
     * @mbggenerated Thu Jan 05 18:26:21 CST 2023
     */
    int insert(ClueActivityRelation record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_clue_activity_relation
     *
     * @mbggenerated Thu Jan 05 18:26:21 CST 2023
     */
    int insertSelective(ClueActivityRelation record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_clue_activity_relation
     *
     * @mbggenerated Thu Jan 05 18:26:21 CST 2023
     */
    ClueActivityRelation selectByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_clue_activity_relation
     *
     * @mbggenerated Thu Jan 05 18:26:21 CST 2023
     */
    int updateByPrimaryKeySelective(ClueActivityRelation record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_clue_activity_relation
     *
     * @mbggenerated Thu Jan 05 18:26:21 CST 2023
     */
    int updateByPrimaryKey(ClueActivityRelation record);

    /**
     * 根据relationList增加线索活动的关联关系
     * @param relationList
     * @return
     */
    int insertClueActivityRelationByList(List<ClueActivityRelation> relationList);

    /**
     * 根据ClueIdActivityId删除市场活动和线索的关联关系
     * @param relation
     * @return
     */
    int deleteRelationByClueIdActivityId(ClueActivityRelation relation);

    /**
     * 通过clueId查询该线索下所有的线索与市场活动关联关系
     * @param clueId
     * @return
     */
    List<ClueActivityRelation> selectClueActRelationListByClueId(String clueId);

    /**
     * 根据clueId删除所有和该线索关联的市场活动的关联关系
     * @param clueId
     * @return
     */
    int deleteClueActivityRelationByClueId(String clueId);
}
