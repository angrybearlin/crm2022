package com.study.crm.workbench.mapper;

import com.study.crm.workbench.domain.Customer;

import java.util.List;
import java.util.Map;

public interface CustomerMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_customer
     *
     * @mbggenerated Fri Jan 06 19:20:41 CST 2023
     */
    int deleteByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_customer
     *
     * @mbggenerated Fri Jan 06 19:20:41 CST 2023
     */
    int insert(Customer record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_customer
     *
     * @mbggenerated Fri Jan 06 19:20:41 CST 2023
     */
    int insertSelective(Customer record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_customer
     *
     * @mbggenerated Fri Jan 06 19:20:41 CST 2023
     */
    Customer selectByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_customer
     *
     * @mbggenerated Fri Jan 06 19:20:41 CST 2023
     */
    int updateByPrimaryKeySelective(Customer record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_customer
     *
     * @mbggenerated Fri Jan 06 19:20:41 CST 2023
     */
    int updateByPrimaryKey(Customer record);

    /**
     * 通过线索转换新增一个客户
     * @param customer
     * @return
     */
    int insertCustomerByClue(Customer customer);

    /**
     * 通过名称模糊查询客户名称
     * @param customerName
     * @return
     */
    List<Customer> selectCustomerNameByName(String customerName);

    /**
     * 根据客户名称精确查询客户
     * @param customerName
     * @return
     */
    Customer selectCustomerByName(String customerName);

    /**
     * 条件查询客户并分页
     * @param map
     * @return
     */
    List<Customer> selectCustomerByConditionForPages(Map<String, Object> map);

    /**
     * 统计条件查询后客户的数量
     * @param map
     * @return
     */
    int selectCountOfCustomerByCondition(Map<String, Object> map);

    /**
     * 新增客户
     * @param customer
     * @return
     */
    int insertCustomer(Customer customer);

    /**
     * 修改客户
     * @param customer
     * @return
     */
    int updateCustomer(Customer customer);

    /**
     * 查询客户信息展示在修改页面
     * @param id
     * @return
     */
    Customer selectCustomerForUpdate(String id);

    /**
     * 根据id删除客户
     * @param ids
     * @return
     */
    int deleteCustomerById(String[] ids);

    /**
     * 根据id查询客户信息展示在详情页上
     * @param id
     * @return
     */
    Customer selectCustomerForDetailById(String id);
}
