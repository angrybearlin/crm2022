package com.study.crm.workbench.mapper;

import com.study.crm.workbench.domain.Activity;

import java.util.List;
import java.util.Map;

public interface ActivityMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Tue Dec 27 18:27:54 CST 2022
     */
    int deleteByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Tue Dec 27 18:27:54 CST 2022
     */
    int insertSelective(Activity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Tue Dec 27 18:27:54 CST 2022
     */
    Activity selectByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Tue Dec 27 18:27:54 CST 2022
     */
    int updateByPrimaryKeySelective(Activity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Tue Dec 27 18:27:54 CST 2022
     */
    int updateByPrimaryKey(Activity record);

    /**
     * 保存创建的市场活动
     * @param activity
     * @return
     */
    int insertActivity(Activity activity);

    /**
     * 根据条件分页查询市场活动
     * @param map
     * @return
     */
    List<Activity> selectActivityByConditionForPage(Map<String, Object> map);

    /**
     * 根据条件查询市场活动总条数
     * @param map
     * @return
     */
    int selectCountOfActivityByCondition(Map<String, Object> map);

    /**
     * 根据id批量删除活动
     * @param ids
     * @return
     */
    int deleteActivityByIds(String[] ids);

    /**
     * 通过id查询市场活动
     * @param id
     * @return
     */
    Activity selectActivityById(String id);

    /**
     * 修改市场活动
     * @param activity
     * @return
     */
    int saveUpdateActivity(Activity activity);

    /**
     * 查询所有市场活动
     * @return
     */
    List<Activity> selectAllActivities();

    /**
     * 根据一个或多个id查询市场活动
     * @param ids
     * @return
     */
    List<Activity> selectActivityByIds(String[] ids);

    /**
     * 通过列表插入市场活动数据
     * @param activityList
     * @return
     */
    int insertActivityByList(List<Activity> activityList);

    /**
     * 通过id查询
     * @param id
     * @return
     */
    Activity selectActivityForDetailById(String id);

    /**
     * 根据线索id查询市场活动
     * @param clueId
     * @return
     */
    List<Activity> selectActivityForDetailByClueId(String clueId);

    /**
     * 根据市场活动的名称查询市场活动，并排除已经和指定的线索id关联过的市场活动
     *
     * @param map@return
     */
    List<Activity> selectActivityForDetailByNameExcludeClueId(Map<String, Object> map);

    /**
     * 根据activityIds查询市场活动
     * @param activityIds
     * @return
     */
    List<Activity> selectActivityForDetailByIds(String[] activityIds);

    /**
     * 在线索转换页面根据名称查询出和该线索关联的市场活动
     * @param map
     * @return
     */
    List<Activity> selectActivityForConvertByNameIncludeClueId(Map<String, Object> map);

    /**
     * 根据名称查询市场活动
     * @param activityName
     * @return
     */
    List<Activity> selectActivityByName(String activityName);
}
